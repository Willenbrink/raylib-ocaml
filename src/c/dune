(library
 (name raylib_c)
 (public_name raylib.c)
 (modules Raylib_c_generated_functions)
 (foreign_archives raylib)
 (foreign_stubs
  (language c)
  (names c_generated_functions)
  (include_dirs %{project_root}/src/c/vendor/src))
 (libraries ctypes.stubs raylib_functions raylib_generated_constants)
 (library_flags
  (:include library_flags.sexp)))

(rule
 (targets library_flags.sexp)
 (deps
  (:discover config/generate.exe))
 (action
  (run %{discover})))

(rule
 (with-stdout-to
  c_generated_functions.c
  (run stubgen/generate_c_functions.exe raylib_stub)))

(rule
 (with-stdout-to
  raylib_c_generated_functions.ml
  (run stubgen/generate_ml_functions.exe raylib_stub)))

(data_only_dirs vendor)

(rule
 (alias build-raylib)
 (deps
  (source_tree vendor))
 (action
  (no-infer
   (progn
    (chdir
     vendor
     (run rm -r build))
    (chdir
     vendor
     (run mkdir build))
    (chdir
     vendor/build
     (run cmake -DBUILD_SHARED_LIBS=OFF -DBUILD_EXAMPLES=OFF
       -DBUILD_GAMES=OFF -DWITH_PIC=ON -DCMAKE_BUILD_TYPE=Release -Wno-dev ..))
    (chdir
     vendor
     (run cmake --build build -- -j 8))
    (chdir
     vendor/build
     (run cmake -DBUILD_SHARED_LIBS=ON -DBUILD_EXAMPLES=OFF -DBUILD_GAMES=OFF
       -DWITH_PIC=ON -DCMAKE_BUILD_TYPE=Release -Wno-dev ..))
    (chdir
     vendor
     (run cmake --build build -- -j 8))))))

(rule
 (deps
  (alias build-raylib))
 (targets libraylib.a dllraylib.so)
 (enabled_if
  (= %{system} linux))
 (action
  (no-infer
   (progn
    (copy vendor/build/src/libraylib.a libraylib.a)
    (copy vendor/build/src/libraylib.so.3.0.0 dllraylib.so)))))

(rule
 (deps
  (alias build-raylib))
 (targets libraylib.a dllraylib.so)
 (enabled_if
  (= %{system} macosx))
 (action
  (no-infer
   (progn
    (copy vendor/build/src/libraylib.a libraylib.a)
    (copy vendor/build/src/libraylib.dylib dllraylib.so)))))
